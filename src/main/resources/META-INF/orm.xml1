<?xml version="1.0" encoding="UTF-8"?>
<entity-mappings xmlns="http://xmlns.jcp.org/xml/ns/persistence/orm" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence/orm http://xmlns.jcp.org/xml/ns/persistence/orm_2_1.xsd"
                 version="2.1">

    <named-native-query name="find_bird_extended" result-set-mapping="bird_extended">
        <query>WITH cte1 AS (
            SELECT *
            FROM (
                     SELECT id AS hc_id, bird_id, catch_date
                          , ROW_NUMBER() OVER (PARTITION BY bird_id ORDER BY catch_date DESC) AS n
                     FROM HEALTH_CHECK
                 ) AS cte1a
            WHERE n = 1
        )
                  , cte2 AS (
                SELECT *
                FROM (
                         SELECT p.id AS pit_id
                              , hc.bird_id
                              , p.Health_Check_Id
                              , p.code
                              , hc.catch_date as catchdate
                              , RANK() OVER (PARTITION BY hc.bird_id ORDER BY catch_date DESC) AS n
                         FROM PIT          AS p
                                  JOIN HEALTH_CHECK AS hc
                                       ON p.Health_Check_Id = hc.id
                     ) AS cte2a
                WHERE n = 1
            )
                  , cte3 AS (
                SELECT *
                FROM (
                         SELECT t.id AS transmitter_id
                              , hc.bird_id
                              , t.Health_Check_Id
                              , t.channel
                              , hc.catch_date as catchdate
                              , RANK() OVER (PARTITION BY hc.bird_id ORDER BY catch_date DESC) AS n
                         FROM TRANSMITTER          AS t
                                  JOIN HEALTH_CHECK AS hc
                                       ON t.Health_Check_Id = hc.id
                     ) AS cte3a
                WHERE n = 1
            )
               SELECT b.id AS birdId, b.name, b.sex, cte1.catch_date AS catchDate, cte1.hc_id as healthCheckId, cte2.code, cte3.channel, b.status, b.comment
               FROM BIRD AS b
                        LEFT JOIN cte1
                                  ON cte1.bird_id = b.id
                        LEFT JOIN cte2
                                  ON cte2.bird_id = b.id
                        LEFT JOIN cte3
                                  ON cte3.bird_id = b.id
               WHERE b.id = :id</query>
    </named-native-query>

    <named-native-query name="find_bird_full" result-set-mapping="bird_full">
        <query>WITH cte1 AS (
            SELECT *
            FROM (
                     SELECT id AS hc_id, bird_id, catch_date
                          , ROW_NUMBER() OVER (PARTITION BY bird_id ORDER BY catch_date DESC) AS n
                     FROM HEALTH_CHECK
                 ) AS cte1a
            WHERE n = 1
        )
                  , cte2 AS (
                SELECT *
                FROM (
                         SELECT p.id AS pit_id
                              , hc.bird_id
                              , p.Health_Check_Id
                              , p.code
                              , hc.catch_date as catchdate
                              , RANK() OVER (PARTITION BY hc.bird_id ORDER BY catch_date DESC) AS n
                         FROM PIT          AS p
                                  JOIN HEALTH_CHECK AS hc
                                       ON p.Health_Check_Id = hc.id
                     ) AS cte2a
                WHERE n = 1
            )
                  , cte3 AS (
                SELECT *
                FROM (
                         SELECT t.id AS transmitter_id
                              , hc.bird_id
                              , t.Health_Check_Id
                              , t.channel
                              , hc.catch_date as catchdate
                              , RANK() OVER (PARTITION BY hc.bird_id ORDER BY catch_date DESC) AS n
                         FROM TRANSMITTER          AS t
                                  JOIN HEALTH_CHECK AS hc
                                       ON t.Health_Check_Id = hc.id
                     ) AS cte3a
                WHERE n = 1
            )
               SELECT b.id AS birdId, b.name, b.sex, cte1.catch_date AS catchDate, cte1.hc_id as healthCheckId, cte2.code, cte3.channel
               FROM BIRD AS b
                        LEFT JOIN cte1
                                  ON cte1.bird_id = b.id
                        LEFT JOIN cte2
                                  ON cte2.bird_id = b.id
                        LEFT JOIN cte3
                                  ON cte3.bird_id = b.id
               WHERE b.id=:id</query>
    </named-native-query>

    <named-native-query name="list_bird_full" result-set-mapping="bird_full">
        <query>WITH cte1 AS (
            SELECT *
            FROM (
                     SELECT id AS hc_id, bird_id, catch_date
                          , ROW_NUMBER() OVER (PARTITION BY bird_id ORDER BY catch_date DESC) AS n
                     FROM HEALTH_CHECK
                 ) AS cte1a
            WHERE n = 1
        )
                  , cte2 AS (
                SELECT *
                FROM (
                         SELECT p.id AS pit_id
                              , hc.bird_id
                              , p.Health_Check_Id
                              , p.code
                              , hc.catch_date as catchdate
                              , RANK() OVER (PARTITION BY hc.bird_id ORDER BY catch_date DESC) AS n
                         FROM PIT          AS p
                                  JOIN HEALTH_CHECK AS hc
                                       ON p.Health_Check_Id = hc.id
                     ) AS cte2a
                WHERE n = 1
            )
                  , cte3 AS (
                SELECT *
                FROM (
                         SELECT t.id AS transmitter_id
                              , hc.bird_id
                              , t.Health_Check_Id
                              , t.channel
                              , hc.catch_date as catchdate
                              , RANK() OVER (PARTITION BY hc.bird_id ORDER BY catch_date DESC) AS n
                         FROM TRANSMITTER          AS t
                                  JOIN HEALTH_CHECK AS hc
                                       ON t.Health_Check_Id = hc.id
                     ) AS cte3a
                WHERE n = 1
            )
               SELECT b.id AS birdId, b.name, b.sex, cte1.catch_date AS catchDate, cte1.hc_id as healthCheckId, cte2.code, cte3.channel
               FROM BIRD AS b
                        LEFT JOIN cte1
                                  ON cte1.bird_id = b.id
                        LEFT JOIN cte2
                                  ON cte2.bird_id = b.id
                        LEFT JOIN cte3
                                  ON cte3.bird_id = b.id</query>
    </named-native-query>

    <named-native-query name="find_health_check" result-set-mapping="health_check_full">
        <query>SELECT h.id, h.catch_date as catchDate, h.catch_time as catchTime, st_x(h.location) as latitude, st_y(h.location) as longitude, b.name, t.channel, p.code,
               h.RELEASE_TIME as releaseTime, h.PARASITE_LOCATION as parasiteLocation, h.PARASITE_COVERAGE as parasiteCoverage,
               h.LICE_LOCATION as liceLocation, h.LICE_COVERAGE as liceCoverage, h.SKIN_DISORDER as skinDisorder, h.BEHAVIOUR as behaviour,
               h.BODY_CONDITION as bodyCondition, h.CAPTURE as capture, h.DISEASE_COMMENT as diseaseComment, h.CATCHING_COMMENT as catchingComment
               FROM HEALTH_CHECK h
                        LEFT JOIN Bird b
                                  ON h.id = b.id
                        LEFT JOIN Transmitter t
                                  ON t.health_check_id = h.id
                        LEFT JOIN Pit p
                                  ON p.health_check_id = h.id
                WHERE h.ID=:id</query>
    </named-native-query>

    <named-native-query name="list_health_check" result-set-mapping="health_check_summary">
        <query>SELECT h.id, h.catch_date as catchDate, h.catch_time as catchTime, st_x(h.location) as latitude, st_y(h.location) as longitude, b.name, t.channel, p.code
               FROM HEALTH_CHECK h
                        LEFT JOIN Bird b
                                  ON h.id = b.id
                        LEFT JOIN Transmitter t
                                  ON t.health_check_id = h.id
                        LEFT JOIN Pit p
                                  ON p.health_check_id = h.id</query>
    </named-native-query>

    <named-native-query name="list_health_check_by_bird_id" result-set-mapping="health_check_summary_no_name">
        <query>SELECT h.id, h.catch_date as catchDate, h.catch_time as catchTime, st_x(h.location) as latitude, st_y(h.location) as longitude, t.channel, p.code
            FROM HEALTH_CHECK h
            LEFT JOIN Bird b
            ON h.bird_id = b.id
            LEFT JOIN Transmitter t
            ON t.health_check_id = h.id
            LEFT JOIN Pit p
            ON p.health_check_id = h.id
            WHERE h.bird_id=:id</query>
    </named-native-query>


    <sql-result-set-mapping name="bird_full">
        <constructor-result target-class="com.nz.kiwi.dto.BirdDTO">
            <column name="birdId" class="java.lang.Long"/>
            <column name="healthCheckId" class="java.lang.Long"/>
            <column name="name" class="java.lang.String"/>
            <column name="sex" class="java.lang.String"/>
            <column name="catchDate" class="java.time.LocalDate"/>
            <column name="code" class="java.lang.String"/>
            <column name="channel" class="java.lang.Integer"/>
        </constructor-result>
    </sql-result-set-mapping>

    <sql-result-set-mapping name="bird_extended">
        <constructor-result target-class="com.nz.kiwi.dto.BirdViewDTO">
            <column name="birdId" class="java.lang.Long"/>
            <column name="healthCheckId" class="java.lang.Long"/>
            <column name="name" class="java.lang.String"/>
            <column name="sex" class="java.lang.String"/>
            <column name="catchDate" class="java.time.LocalDate"/>
            <column name="code" class="java.lang.String"/>
            <column name="channel" class="java.lang.Integer"/>
            <column name="status" class="java.lang.String"/>
            <column name="comment" class="java.lang.String"/>
        </constructor-result>
    </sql-result-set-mapping>

    <sql-result-set-mapping name="health_check_summary">
        <constructor-result target-class="com.nz.kiwi.dto.HealthCheckDTO">
            <column name="id" class="java.lang.Long"/>
            <column name="catchDate" class="java.time.LocalDate"/>
            <column name="catchTime" class="java.time.LocalTime"/>
            <column name="longitude" class="java.lang.Double"/>
            <column name="latitude" class="java.lang.Double"/>
            <column name="name" class="java.lang.String"/>
            <column name="channel" class="java.lang.Integer"/>
            <column name="code" class="java.lang.String"/>
        </constructor-result>
    </sql-result-set-mapping>

    <sql-result-set-mapping name="health_check_summary_no_name">
        <constructor-result target-class="com.nz.kiwi.dto.HealthCheckNoNameDTO">
            <column name="id" class="java.lang.Long"/>
            <column name="catchDate" class="java.time.LocalDate"/>
            <column name="catchTime" class="java.time.LocalTime"/>
            <column name="longitude" class="java.lang.Double"/>
            <column name="latitude" class="java.lang.Double"/>
            <column name="channel" class="java.lang.Integer"/>
            <column name="code" class="java.lang.String"/>
        </constructor-result>
    </sql-result-set-mapping>


    <sql-result-set-mapping name="health_check_full">
        <constructor-result target-class="com.nz.kiwi.dto.HealthCheckViewDTO">
            <column name="id" class="java.lang.Long"/>
            <column name="catchDate" class="java.time.LocalDate"/>
            <column name="catchTime" class="java.time.LocalTime"/>
            <column name="longitude" class="java.lang.Double"/>
            <column name="latitude" class="java.lang.Double"/>
            <column name="name" class="java.lang.String"/>
            <column name="channel" class="java.lang.Integer"/>
            <column name="code" class="java.lang.String"/>
            <column name="releaseTime" class="java.time.LocalTime"/>
            <column name="parasiteLocation" class="java.lang.String"/>
            <column name="parasiteCoverage" class="java.lang.String"/>
            <column name="liceLocation" class="java.lang.String"/>
            <column name="liceCoverage" class="java.lang.String"/>
            <column name="skinDisorder" class="java.lang.String"/>
            <column name="behaviour" class="java.lang.String"/>
            <column name="bodyCondition" class="java.lang.String"/>
            <column name="capture" class="java.lang.String"/>
            <column name="diseaseComment" class="java.lang.String"/>
            <column name="catchingComment" class="java.lang.String"/>
        </constructor-result>
    </sql-result-set-mapping>

</entity-mappings>

